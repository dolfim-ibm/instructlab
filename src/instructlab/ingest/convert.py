# SPDX-License-Identifier: Apache-2.0

# Standard

# Standard
from pathlib import Path
import datetime
import logging

# Third Party
from docling.document_converter import (
    ConversionStatus,
    DocumentConversionInput,
    DocumentConverter,
    PipelineOptions,
)
import click

# First Party
from instructlab import clickext

# from instructlab.configuration import storage_dirs_exist

logger = logging.getLogger(__name__)


@click.command(name="convert")
@clickext.display_params
@click.option(
    "--source",
    "source_paths",
    multiple=True,
    type=click.Path(),
    help="The input source documents to ingest.",
)
@click.option(
    "--knowledge-docs-path",
    type=click.Path(),
    show_default=True,
)
@click.option(
    "--ocr/--no-ocr",
    "do_ocr",
    default=True,
    help="If set, the bitmap content of document will be processed with OCR.",
)
@click.pass_context
def convert(
    ctx,
    source_paths,
    knowledge_docs_path,
    do_ocr: bool,
):
    """Command Group for Interacting with the Data generated by InstructLab.

    If this is your first time running ilab, it's best to start with `ilab config init` to create the environment.
    """
    # load defaults from config ctx obj if not specified via CLI arg
    if not knowledge_docs_path:
        knowledge_docs_path = ctx.obj.config.ingest.knowledge_docs_path

    knowledge_docs_path = Path(knowledge_docs_path)
    source_paths = [Path(source) for source in source_paths]

    knowledge_docs_path.mkdir(exist_ok=True, parents=True)

    convert_timestamp = datetime.datetime.now(datetime.timezone.utc)

    doc_sources = []
    for source in source_paths:
        if source.is_dir():
            doc_sources.extend(list(source.glob("**/*.pdf")))
        elif source.is_file():
            doc_sources.extend([source])
        elif not source.exists():
            logger.warning(f"Source path {source} for not exist. Skipping it.")
            continue
        else:
            logger.warning(f"Source type {source} is not supported. Skipping it.")
            continue

    doc_inputs = DocumentConversionInput.from_paths(doc_sources)

    pipeline_options = PipelineOptions(do_ocr=do_ocr)
    converter = DocumentConverter(pipeline_options=pipeline_options)

    for result in converter.convert(doc_inputs):
        if result.status not in (ConversionStatus.SUCCESS,):
            logger.error(f"Error converting file. {result.errors}")
            continue

        doc_basename = result.input.file.with_suffix("").name
        doc_filename = (
            f"{doc_basename}_{convert_timestamp.strftime('%Y%m%dT%H%M%S')}.md"
        )
        output_filename = knowledge_docs_path / doc_filename
        with output_filename.open("w") as fp:
            fp.write(result.render_as_markdown())

        logger.debug(f"Document {output_filename} added to the knowledge docs.")
